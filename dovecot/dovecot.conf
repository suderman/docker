## Dovecot configuration file

# Enable installed protocols
protocols = imap
listen = *, ::

# Base directory where to store runtime data.
base_dir = /var/run/dovecot/

# Greeting message for clients.
#login_greeting = Dovecot ready.

# Should all processes be killed when Dovecot master process shuts down.
#shutdown_clients = yes

# Space separated list of environment variables that are preserved on Dovecot
#import_environment = TZ

# Dictionary server settings
dict {
}

# -----------------------------------------------------------------------------
# 10-auth.conf
# -----------------------------------------------------------------------------

# auth_ssl_require_client_cert = yes
# auth_ssl_username_from_cert = yes

auth_mechanisms = plain login

passdb {
  driver = passwd-file
  args = /app/dovecot/passwd
  # deny = no
  # master = no
  # pass = no
}

userdb {
    driver = static
    args = uid=data gid=data home=/app/var/mail/%d/%n allow_all_users=yes
}

# -----------------------------------------------------------------------------
# 10-director.conf
# -----------------------------------------------------------------------------

# List of IPs or hostnames to all director servers, including ourself.
#director_servers =

# List of IPs or hostnames to all backend mail servers. 
#director_mail_servers =

# How long to redirect users to a specific server.
#director_user_expire = 15 min

# TCP/IP port that accepts doveadm connections (instead of director connections)
#director_doveadm_port = 0

# How the username is translated before being hashed. 
#director_username_hash = %Lu

# To enable director service, uncomment the modes and assign a port.
service director {
  unix_listener login/director {
    #mode = 0666
  }
  fifo_listener login/proxy-notify {
    #mode = 0666
  }
  unix_listener director-userdb {
    #mode = 0600
  }
  inet_listener {
    #port =
  }
}

# Enable director for the wanted login services by telling them to
# connect to director socket instead of the default login socket:
service imap-login {
  #executable = imap-login director
}
service pop3-login {
  #executable = pop3-login director
}

# Enable director for LMTP proxying:
protocol lmtp {
  #auth_socket_path = director-userdb
}

# -----------------------------------------------------------------------------
# 10-logging.conf
# -----------------------------------------------------------------------------

# Log file to use for error messages.
#log_path = syslog
log_path = /app/log/dovecot.log

# Log file to use for informational messages. Defaults to log_path.
#info_log_path =

# Log file to use for debug messages. Defaults to info_log_path.
#debug_log_path =

# Syslog facility to use if you're logging to syslog. 
#syslog_facility = mail

# Log unsuccessful authentication attempts and the reasons why they failed.
#auth_verbose = no

# In case of password mismatches, log the attempted password: no, plain, sha1.
#auth_verbose_passwords = no

# Even more verbose logging for debugging purposes.
#auth_debug = no

# In case of password mismatches, log the passwords and used scheme.
#auth_debug_passwords = no

# Enable mail process debugging. 
#mail_debug = no

# Show protocol level SSL errors.
#verbose_ssl = no

# mail_log plugin provides more event logging for mail processes.
plugin {
  # Events to log. Also available: flag_change append
  #mail_log_events = delete undelete expunge copy mailbox_delete mailbox_rename
  # Available fields: uid, box, msgid, from, subject, size, vsize, flags
  # size and vsize are available only for expunge and copy events.
  #mail_log_fields = uid box msgid size
}

# Prefix for each line written to log file. % codes are in strftime(3) format.
#log_timestamp = "%b %d %H:%M:%S "

# Space-separated list of elements we want to log. 
#login_log_format_elements = user=<%u> method=%m rip=%r lip=%l mpid=%e %c

# Login log format. %s contains login_log_format_elements string, %$ contains data.
#login_log_format = %$: %s

# Log prefix for mail processes. 
#mail_log_prefix = "%s(%u): "

# Format to use for logging mail deliveries. You can use variables:
#  %$ - Delivery status message (e.g. "saved to INBOX")
#  %m - Message-ID
#  %s - Subject
#  %f - From address
#  %p - Physical size
#  %w - Virtual size
#deliver_log_format = msgid=%m: %$

# -----------------------------------------------------------------------------
# 10-mail.conf
# -----------------------------------------------------------------------------

mail_location = maildir:/app/var/mail/%d/%n:LAYOUT=fs

# http://apple.stackexchange.com/questions/105145
namespace inbox {
  inbox = yes

  mailbox Drafts {
    auto = subscribe
    special_use = \Drafts
  }

  mailbox "Sent Messages" {
    auto = subscribe
    special_use = \Sent
  }

  mailbox Junk {
    auto = subscribe
    special_use = \Junk
  }

  mailbox "Deleted Messages" {
    auto = subscribe
    special_use = \Trash
  }

  mailbox Archive {
    auto = subscribe
    special_use = \Archive
  }

  mailbox Notes {
    auto = subscribe
  }
}

# -----------------------------------------------------------------------------
# 10-master.conf
# -----------------------------------------------------------------------------

service imap-login {
  inet_listener imap {
  }

  #disable imaps since we use TLS connections through the standard imap
  inet_listener imaps {
    port = 0
  }
}

service imap {
}

# not sure if this is needed
service lmtp {
 unix_listener /var/spool/postfix/private/dovecot-lmtp {
   group = data
   mode = 0660
   user = postfix
  }
}

service auth {
  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    user = postfix
    group = data
  }
}

service auth-worker {
}

# -----------------------------------------------------------------------------
# 10-ssl.conf
# -----------------------------------------------------------------------------

ssl = required
disable_plaintext_auth = yes
# ssl_cert_username_field = commonName

ssl_cert = </app/certs/imap.$DOMAIN.crt
ssl_key = </app/certs/imap.$DOMAIN.key
ssl_ca = </app/certs/ca.crt

# -----------------------------------------------------------------------------
# 10-tcpwrapper.conf
# -----------------------------------------------------------------------------

#login_access_sockets = tcpwrap

#service tcpwrap {
#  unix_listener login/tcpwrap {
#    group = $default_login_user
#    mode = 0600
#    user = $default_login_user
#  }
#}

# -----------------------------------------------------------------------------
# 15-lda.conf
# -----------------------------------------------------------------------------

protocol lda {
  hostname = mail.docker.container
  postmaster_address = postmaster@mail.docker.container
  mail_plugin_dir = /usr/lib/dovecot/modules/lda
}

# -----------------------------------------------------------------------------
# 20-imap.conf
# -----------------------------------------------------------------------------

protocol imap {
  imap_client_workarounds = tb-extra-mailbox-sep
}


# -----------------------------------------------------------------------------
# 90-acl.conf
# -----------------------------------------------------------------------------

# vfile backend reads ACLs from "dovecot-acl" file from mail directory.
# You can also optionally give a global ACL directory path where ACLs are
# applied to all users' mailboxes. The global ACL directory contains
# one file for each mailbox, eg. INBOX or sub.mailbox. cache_secs parameter
# specifies how many seconds to wait between stat()ing dovecot-acl file
# to see if it changed.
plugin {
  #acl = vfile:/etc/dovecot/global-acls:cache_secs=300
}

# To let users LIST mailboxes shared by other users, Dovecot needs a
# shared mailbox dictionary. For example:
plugin {
  #acl_shared_dict = file:/var/lib/dovecot/shared-mailboxes
}

# -----------------------------------------------------------------------------
# 90-plugin.conf
# -----------------------------------------------------------------------------

# All wanted plugins must be listed in mail_plugins setting before any of the
# settings take effect. See <doc/wiki/Plugins.txt> for list of plugins and
# their configuration. Note that %variable expansion is done for all values.

plugin {
  #setting_name = value
}

# -----------------------------------------------------------------------------
# 90-quota.conf
# -----------------------------------------------------------------------------

# Quota limits are set using "quota_rule" parameters. To get per-user quota
# limits, you can set/override them by returning "quota_rule" extra field
# from userdb. It's also possible to give mailbox-specific limits, for example
# to give additional 100 MB when saving to Trash:

plugin {
  #quota_rule = *:storage=1G
  #quota_rule2 = Trash:storage=+100M

  # LDA/LMTP allows saving the last mail to bring user from under quota to
  # over quota, if the quota doesn't grow too high. Default is to allow as
  # long as quota will stay under 10% above the limit. Also allowed e.g. 10M.
  #quota_grace = 10%%
}

##
## Quota warnings
##

# You can execute a given command when user exceeds a specified quota limit.
# Each quota root has separate limits. Only the command for the first
# exceeded limit is excecuted, so put the highest limit first.
# The commands are executed via script service by connecting to the named
# UNIX socket (quota-warning below).
# Note that % needs to be escaped as %%, otherwise "% " expands to empty.

plugin {
  #quota_warning = storage=95%% quota-warning 95 %u
  #quota_warning2 = storage=80%% quota-warning 80 %u
}

# Example quota-warning service. The unix listener's permissions should be
# set in a way that mail processes can connect to it. Below example assumes
# that mail processes run as vmail user. If you use mode=0666, all system users
# can generate quota warnings to anyone.
#service quota-warning {
#  executable = script /usr/local/bin/quota-warning.sh
#  user = dovecot
#  unix_listener quota-warning {
#    user = vmail
#  }
#}

##
## Quota backends
##

# Multiple backends are supported:
#   dirsize: Find and sum all the files found from mail directory.
#            Extremely SLOW with Maildir. It'll eat your CPU and disk I/O.
#   dict: Keep quota stored in dictionary (eg. SQL)
#   maildir: Maildir++ quota
#   fs: Read-only support for filesystem quota

plugin {
  #quota = dirsize:User quota
  #quota = maildir:User quota
  #quota = dict:User quota::proxy::quota
  #quota = fs:User quota
}

# Multiple quota roots are also possible, for example this gives each user
# their own 100MB quota and one shared 1GB quota within the domain:
plugin {
  #quota = dict:user::proxy::quota
  #quota2 = dict:domain:%d:proxy::quota_domain
  #quota_rule = *:storage=102400
  #quota2_rule = *:storage=1048576
}
