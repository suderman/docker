#!/bin/bash
eval "$(cat ~/.local/share/shelper.sh || curl suderman.github.io/shelper/shelper.sh)"

# Set environment variables
export SERVER=$(ref SERVER 127.0.0.1)     # ip address of host server
export CA=$(ref CA $SERVER:11443)         # padlock's ca server
export OCSP=$(ref OCSP $SERVER:11188)     # padlock's ocsp server
export NAME=$(ref NAME vpn.$DOMAIN)       # subdomain.domain name

# Additional variables used in openvpn config
export TAP=$(ref TAP "${SERVER%.*}")      # 10.0.0.2 becomes 10.0.0
export TUN=$(ref TUN "${TAP%.*}.10")      # 10.0.0.2 becomes 10.0.10
export BR=$(ref BR br0)                   # name of pre-existing bridge
export FORWARD_443=$(ref FORWARD_443 444) # forward non-vpn traffic to nginx

# Create client config directories for static IP assignment
rm -rf /app/tun.ccd/* /app/tap.ccd/*
while read line; do
  db=$(echo $line | sed 's/ \{1,\}/,/g')
  echo "ifconfig-push ${TUN}.$(key :2 $db) 255.255.255.0" > /app/tun.ccd/$(key :1 $db)@${NAME}
  echo "ifconfig-push ${TAP}.$(key :3 $db) 255.255.255.0" > /app/tap.ccd/$(key :1 $db)@${NAME}
done < /app/dhcp

# Activate forwarding
append "net.ipv4.ip_forward=1" /etc/sysctl.conf

# Wait for Padlock to be running
msg "Ensure $CA is running"
waitfor $CA

# Download CA certificate
copy $CA/ca.crt /app/ca.crt

# Download OVPN profile prepended with tun/tap.conf
curl $CA/$NAME.tun.ovpn | cat /app/tun.conf - > /app/$NAME.tun.ovpn
curl $CA/$NAME.tap.ovpn | cat /app/tap.conf - > /app/$NAME.tap.ovpn
chmod 600 /app/*.ovpn

# Expand any variables
deref /app/$NAME.tun.ovpn
deref /app/$NAME.tap.ovpn
deref /app/verify
deref /app/tun
deref /app/tap

# Start openvpn and tail the log
cd /app && touch tun.log tap.log
while true; do openvpn /app/$NAME.tun.ovpn; done >> /app/tun.log &
while true; do openvpn /app/$NAME.tap.ovpn; done >> /app/tap.log &
tail -F /app/*.log
